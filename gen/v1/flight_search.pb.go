// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v6.30.1
// source: v1/flight_search.proto

package flightsearch

import (
	money "google.golang.org/genproto/googleapis/type/money"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Fare_FareType int32

const (
	Fare_FARE_TYPE_UNSPECIFIED Fare_FareType = 0
	Fare_PUBLISHED             Fare_FareType = 1 // Standard published fare.
	Fare_PRIVATE               Fare_FareType = 2 // Negotiated or corporate fare.
	Fare_NET                   Fare_FareType = 3 // Net fare.
	Fare_BULK                  Fare_FareType = 4 // Bulk fare.
	Fare_TOUR                  Fare_FareType = 5 // Tour fare.
)

// Enum value maps for Fare_FareType.
var (
	Fare_FareType_name = map[int32]string{
		0: "FARE_TYPE_UNSPECIFIED",
		1: "PUBLISHED",
		2: "PRIVATE",
		3: "NET",
		4: "BULK",
		5: "TOUR",
	}
	Fare_FareType_value = map[string]int32{
		"FARE_TYPE_UNSPECIFIED": 0,
		"PUBLISHED":             1,
		"PRIVATE":               2,
		"NET":                   3,
		"BULK":                  4,
		"TOUR":                  5,
	}
)

func (x Fare_FareType) Enum() *Fare_FareType {
	p := new(Fare_FareType)
	*p = x
	return p
}

func (x Fare_FareType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Fare_FareType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_flight_search_proto_enumTypes[0].Descriptor()
}

func (Fare_FareType) Type() protoreflect.EnumType {
	return &file_v1_flight_search_proto_enumTypes[0]
}

func (x Fare_FareType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Fare_FareType.Descriptor instead.
func (Fare_FareType) EnumDescriptor() ([]byte, []int) {
	return file_v1_flight_search_proto_rawDescGZIP(), []int{3, 0}
}

type FlightSearchQuery_TripType int32

const (
	FlightSearchQuery_TRIP_TYPE_UNSPECIFIED FlightSearchQuery_TripType = 0
	FlightSearchQuery_ONE_WAY               FlightSearchQuery_TripType = 1
	FlightSearchQuery_ROUND_TRIP            FlightSearchQuery_TripType = 2
	FlightSearchQuery_MULTI_CITY            FlightSearchQuery_TripType = 3
)

// Enum value maps for FlightSearchQuery_TripType.
var (
	FlightSearchQuery_TripType_name = map[int32]string{
		0: "TRIP_TYPE_UNSPECIFIED",
		1: "ONE_WAY",
		2: "ROUND_TRIP",
		3: "MULTI_CITY",
	}
	FlightSearchQuery_TripType_value = map[string]int32{
		"TRIP_TYPE_UNSPECIFIED": 0,
		"ONE_WAY":               1,
		"ROUND_TRIP":            2,
		"MULTI_CITY":            3,
	}
)

func (x FlightSearchQuery_TripType) Enum() *FlightSearchQuery_TripType {
	p := new(FlightSearchQuery_TripType)
	*p = x
	return p
}

func (x FlightSearchQuery_TripType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlightSearchQuery_TripType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_flight_search_proto_enumTypes[1].Descriptor()
}

func (FlightSearchQuery_TripType) Type() protoreflect.EnumType {
	return &file_v1_flight_search_proto_enumTypes[1]
}

func (x FlightSearchQuery_TripType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlightSearchQuery_TripType.Descriptor instead.
func (FlightSearchQuery_TripType) EnumDescriptor() ([]byte, []int) {
	return file_v1_flight_search_proto_rawDescGZIP(), []int{5, 0}
}

// Represents a location (airport).
type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AirportCode string `protobuf:"bytes,1,opt,name=airport_code,json=airportCode,proto3" json:"airport_code,omitempty"` // IATA airport code (e.g., "JFK", "LHR").
	CityCode    string `protobuf:"bytes,2,opt,name=city_code,json=cityCode,proto3" json:"city_code,omitempty"`          // IATA city code (e.g., "NYC", "LON").
	CityName    string `protobuf:"bytes,3,opt,name=city_name,json=cityName,proto3" json:"city_name,omitempty"`          // City name (e.g., "New York", "London").
	CountryCode string `protobuf:"bytes,4,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"` // ISO 3166-1 alpha-2 country code (e.g., "US", "GB").
	CountryName string `protobuf:"bytes,5,opt,name=country_name,json=countryName,proto3" json:"country_name,omitempty"` // Country name (e.g., "United States", "United Kingdom").
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flight_search_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flight_search_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_v1_flight_search_proto_rawDescGZIP(), []int{0}
}

func (x *Location) GetAirportCode() string {
	if x != nil {
		return x.AirportCode
	}
	return ""
}

func (x *Location) GetCityCode() string {
	if x != nil {
		return x.CityCode
	}
	return ""
}

func (x *Location) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *Location) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *Location) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

// Represents a single segment of a flight (e.g., JFK -> LHR).
type FlightSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatingCarrierCode string                 `protobuf:"bytes,1,opt,name=operating_carrier_code,json=operatingCarrierCode,proto3" json:"operating_carrier_code,omitempty"` // IATA code of the operating carrier (e.g., "AA").
	MarketingCarrierCode string                 `protobuf:"bytes,2,opt,name=marketing_carrier_code,json=marketingCarrierCode,proto3" json:"marketing_carrier_code,omitempty"` // IATA code of the marketing carrier (e.g., "BA" for a codeshare).
	FlightNumber         string                 `protobuf:"bytes,3,opt,name=flight_number,json=flightNumber,proto3" json:"flight_number,omitempty"`                           // Flight number (e.g., "123").
	DepartureLocation    *Location              `protobuf:"bytes,4,opt,name=departure_location,json=departureLocation,proto3" json:"departure_location,omitempty"`
	ArrivalLocation      *Location              `protobuf:"bytes,5,opt,name=arrival_location,json=arrivalLocation,proto3" json:"arrival_location,omitempty"`
	DepartureTime        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=departure_time,json=departureTime,proto3" json:"departure_time,omitempty"`
	ArrivalTime          *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=arrival_time,json=arrivalTime,proto3" json:"arrival_time,omitempty"`
	AircraftCode         string                 `protobuf:"bytes,8,opt,name=aircraft_code,json=aircraftCode,proto3" json:"aircraft_code,omitempty"`           // Aircraft type code (e.g., "777", "320").
	DurationMinutes      int32                  `protobuf:"varint,9,opt,name=duration_minutes,json=durationMinutes,proto3" json:"duration_minutes,omitempty"` // Duration of the segment in minutes.
}

func (x *FlightSegment) Reset() {
	*x = FlightSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flight_search_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightSegment) ProtoMessage() {}

func (x *FlightSegment) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flight_search_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightSegment.ProtoReflect.Descriptor instead.
func (*FlightSegment) Descriptor() ([]byte, []int) {
	return file_v1_flight_search_proto_rawDescGZIP(), []int{1}
}

func (x *FlightSegment) GetOperatingCarrierCode() string {
	if x != nil {
		return x.OperatingCarrierCode
	}
	return ""
}

func (x *FlightSegment) GetMarketingCarrierCode() string {
	if x != nil {
		return x.MarketingCarrierCode
	}
	return ""
}

func (x *FlightSegment) GetFlightNumber() string {
	if x != nil {
		return x.FlightNumber
	}
	return ""
}

func (x *FlightSegment) GetDepartureLocation() *Location {
	if x != nil {
		return x.DepartureLocation
	}
	return nil
}

func (x *FlightSegment) GetArrivalLocation() *Location {
	if x != nil {
		return x.ArrivalLocation
	}
	return nil
}

func (x *FlightSegment) GetDepartureTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DepartureTime
	}
	return nil
}

func (x *FlightSegment) GetArrivalTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ArrivalTime
	}
	return nil
}

func (x *FlightSegment) GetAircraftCode() string {
	if x != nil {
		return x.AircraftCode
	}
	return ""
}

func (x *FlightSegment) GetDurationMinutes() int32 {
	if x != nil {
		return x.DurationMinutes
	}
	return 0
}

// Represents a leg of a flight (e.g., a sequence of segments).
type FlightLeg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segments             []*FlightSegment `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`                                                        // Multiple segments for connecting flights.
	TotalDurationMinutes int32            `protobuf:"varint,2,opt,name=total_duration_minutes,json=totalDurationMinutes,proto3" json:"total_duration_minutes,omitempty"` // Total duration of the leg in minutes.
}

func (x *FlightLeg) Reset() {
	*x = FlightLeg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flight_search_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightLeg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightLeg) ProtoMessage() {}

func (x *FlightLeg) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flight_search_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightLeg.ProtoReflect.Descriptor instead.
func (*FlightLeg) Descriptor() ([]byte, []int) {
	return file_v1_flight_search_proto_rawDescGZIP(), []int{2}
}

func (x *FlightLeg) GetSegments() []*FlightSegment {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *FlightLeg) GetTotalDurationMinutes() int32 {
	if x != nil {
		return x.TotalDurationMinutes
	}
	return 0
}

// Represents a fare for a flight.
type Fare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FareBasisCode          string        `protobuf:"bytes,1,opt,name=fare_basis_code,json=fareBasisCode,proto3" json:"fare_basis_code,omitempty"` // Fare basis code (e.g., "YOW").
	FareType               Fare_FareType `protobuf:"varint,2,opt,name=fare_type,json=fareType,proto3,enum=flightsearch.Fare_FareType" json:"fare_type,omitempty"`
	Cabin                  string        `protobuf:"bytes,3,opt,name=cabin,proto3" json:"cabin,omitempty"`                                                                     // Cabin class (e.g., "Economy", "Business", "First").
	BaseFare               *money.Money  `protobuf:"bytes,4,opt,name=base_fare,json=baseFare,proto3" json:"base_fare,omitempty"`                                               // Base fare amount.
	Taxes                  *money.Money  `protobuf:"bytes,5,opt,name=taxes,proto3" json:"taxes,omitempty"`                                                                     // Taxes and fees.
	TotalFare              *money.Money  `protobuf:"bytes,6,opt,name=total_fare,json=totalFare,proto3" json:"total_fare,omitempty"`                                            // Total fare amount (base + taxes).
	ProviderSpecificFareId string        `protobuf:"bytes,7,opt,name=provider_specific_fare_id,json=providerSpecificFareId,proto3" json:"provider_specific_fare_id,omitempty"` // unique id from provider
	Rules                  string        `protobuf:"bytes,8,opt,name=rules,proto3" json:"rules,omitempty"`                                                                     // fare rules
	IsRefundable           bool          `protobuf:"varint,9,opt,name=is_refundable,json=isRefundable,proto3" json:"is_refundable,omitempty"`
	IsChangeable           bool          `protobuf:"varint,10,opt,name=is_changeable,json=isChangeable,proto3" json:"is_changeable,omitempty"`
}

func (x *Fare) Reset() {
	*x = Fare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flight_search_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fare) ProtoMessage() {}

func (x *Fare) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flight_search_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fare.ProtoReflect.Descriptor instead.
func (*Fare) Descriptor() ([]byte, []int) {
	return file_v1_flight_search_proto_rawDescGZIP(), []int{3}
}

func (x *Fare) GetFareBasisCode() string {
	if x != nil {
		return x.FareBasisCode
	}
	return ""
}

func (x *Fare) GetFareType() Fare_FareType {
	if x != nil {
		return x.FareType
	}
	return Fare_FARE_TYPE_UNSPECIFIED
}

func (x *Fare) GetCabin() string {
	if x != nil {
		return x.Cabin
	}
	return ""
}

func (x *Fare) GetBaseFare() *money.Money {
	if x != nil {
		return x.BaseFare
	}
	return nil
}

func (x *Fare) GetTaxes() *money.Money {
	if x != nil {
		return x.Taxes
	}
	return nil
}

func (x *Fare) GetTotalFare() *money.Money {
	if x != nil {
		return x.TotalFare
	}
	return nil
}

func (x *Fare) GetProviderSpecificFareId() string {
	if x != nil {
		return x.ProviderSpecificFareId
	}
	return ""
}

func (x *Fare) GetRules() string {
	if x != nil {
		return x.Rules
	}
	return ""
}

func (x *Fare) GetIsRefundable() bool {
	if x != nil {
		return x.IsRefundable
	}
	return false
}

func (x *Fare) GetIsChangeable() bool {
	if x != nil {
		return x.IsChangeable
	}
	return false
}

// Represents a single flight option.
type Flight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Legs                 []*FlightLeg `protobuf:"bytes,1,rep,name=legs,proto3" json:"legs,omitempty"`                                                                // Multiple legs for roundtrip or multi-city.
	Fares                []*Fare      `protobuf:"bytes,2,rep,name=fares,proto3" json:"fares,omitempty"`                                                              // Multiple fares for different cabin classes or fare types.
	Provider             string       `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`                                                        // Name of the provider (e.g., "Amadeus", "United NDC").
	ProviderFlightId     string       `protobuf:"bytes,4,opt,name=provider_flight_id,json=providerFlightId,proto3" json:"provider_flight_id,omitempty"`              // unique id from provider
	TotalDurationMinutes int32        `protobuf:"varint,5,opt,name=total_duration_minutes,json=totalDurationMinutes,proto3" json:"total_duration_minutes,omitempty"` // Total duration of the flight in minutes.
}

func (x *Flight) Reset() {
	*x = Flight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flight_search_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flight) ProtoMessage() {}

func (x *Flight) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flight_search_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flight.ProtoReflect.Descriptor instead.
func (*Flight) Descriptor() ([]byte, []int) {
	return file_v1_flight_search_proto_rawDescGZIP(), []int{4}
}

func (x *Flight) GetLegs() []*FlightLeg {
	if x != nil {
		return x.Legs
	}
	return nil
}

func (x *Flight) GetFares() []*Fare {
	if x != nil {
		return x.Fares
	}
	return nil
}

func (x *Flight) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Flight) GetProviderFlightId() string {
	if x != nil {
		return x.ProviderFlightId
	}
	return ""
}

func (x *Flight) GetTotalDurationMinutes() int32 {
	if x != nil {
		return x.TotalDurationMinutes
	}
	return 0
}

// Represents a search query.
type FlightSearchQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TripType             FlightSearchQuery_TripType `protobuf:"varint,1,opt,name=trip_type,json=tripType,proto3,enum=flightsearch.FlightSearchQuery_TripType" json:"trip_type,omitempty"`
	OriginLocations      []*Location                `protobuf:"bytes,2,rep,name=origin_locations,json=originLocations,proto3" json:"origin_locations,omitempty"`                // For multi-city, multiple origins.
	DestinationLocations []*Location                `protobuf:"bytes,3,rep,name=destination_locations,json=destinationLocations,proto3" json:"destination_locations,omitempty"` // For multi-city, multiple destinations.
	DepartureDates       []*timestamppb.Timestamp   `protobuf:"bytes,4,rep,name=departure_dates,json=departureDates,proto3" json:"departure_dates,omitempty"`                   // For multi-city, multiple departure dates.
	ReturnDate           *timestamppb.Timestamp     `protobuf:"bytes,5,opt,name=return_date,json=returnDate,proto3" json:"return_date,omitempty"`                               // For roundtrip.
	NumberOfPassengers   int32                      `protobuf:"varint,6,opt,name=number_of_passengers,json=numberOfPassengers,proto3" json:"number_of_passengers,omitempty"`
	CabinPreference      string                     `protobuf:"bytes,7,opt,name=cabin_preference,json=cabinPreference,proto3" json:"cabin_preference,omitempty"`       // Preferred cabin class (e.g., "Economy", "Business").
	PreferredCarriers    []string                   `protobuf:"bytes,8,rep,name=preferred_carriers,json=preferredCarriers,proto3" json:"preferred_carriers,omitempty"` // List of preferred carrier codes
}

func (x *FlightSearchQuery) Reset() {
	*x = FlightSearchQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flight_search_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightSearchQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightSearchQuery) ProtoMessage() {}

func (x *FlightSearchQuery) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flight_search_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightSearchQuery.ProtoReflect.Descriptor instead.
func (*FlightSearchQuery) Descriptor() ([]byte, []int) {
	return file_v1_flight_search_proto_rawDescGZIP(), []int{5}
}

func (x *FlightSearchQuery) GetTripType() FlightSearchQuery_TripType {
	if x != nil {
		return x.TripType
	}
	return FlightSearchQuery_TRIP_TYPE_UNSPECIFIED
}

func (x *FlightSearchQuery) GetOriginLocations() []*Location {
	if x != nil {
		return x.OriginLocations
	}
	return nil
}

func (x *FlightSearchQuery) GetDestinationLocations() []*Location {
	if x != nil {
		return x.DestinationLocations
	}
	return nil
}

func (x *FlightSearchQuery) GetDepartureDates() []*timestamppb.Timestamp {
	if x != nil {
		return x.DepartureDates
	}
	return nil
}

func (x *FlightSearchQuery) GetReturnDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReturnDate
	}
	return nil
}

func (x *FlightSearchQuery) GetNumberOfPassengers() int32 {
	if x != nil {
		return x.NumberOfPassengers
	}
	return 0
}

func (x *FlightSearchQuery) GetCabinPreference() string {
	if x != nil {
		return x.CabinPreference
	}
	return ""
}

func (x *FlightSearchQuery) GetPreferredCarriers() []string {
	if x != nil {
		return x.PreferredCarriers
	}
	return nil
}

// Represents a search result.
type FlightSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query              *FlightSearchQuery   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Flights            []*Flight            `protobuf:"bytes,2,rep,name=flights,proto3" json:"flights,omitempty"`
	CombinedRoundtrips []*CombinedRoundtrip `protobuf:"bytes,3,rep,name=combined_roundtrips,json=combinedRoundtrips,proto3" json:"combined_roundtrips,omitempty"` // New field for combined one-way roundtrip results.
	SearchId           string               `protobuf:"bytes,4,opt,name=search_id,json=searchId,proto3" json:"search_id,omitempty"`                               // unique id for search
	Provider           string               `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`                                               // provider name
}

func (x *FlightSearchResult) Reset() {
	*x = FlightSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flight_search_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightSearchResult) ProtoMessage() {}

func (x *FlightSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flight_search_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightSearchResult.ProtoReflect.Descriptor instead.
func (*FlightSearchResult) Descriptor() ([]byte, []int) {
	return file_v1_flight_search_proto_rawDescGZIP(), []int{6}
}

func (x *FlightSearchResult) GetQuery() *FlightSearchQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *FlightSearchResult) GetFlights() []*Flight {
	if x != nil {
		return x.Flights
	}
	return nil
}

func (x *FlightSearchResult) GetCombinedRoundtrips() []*CombinedRoundtrip {
	if x != nil {
		return x.CombinedRoundtrips
	}
	return nil
}

func (x *FlightSearchResult) GetSearchId() string {
	if x != nil {
		return x.SearchId
	}
	return ""
}

func (x *FlightSearchResult) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

type CombinedRoundtrip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutboundFlight       *Flight      `protobuf:"bytes,1,opt,name=outbound_flight,json=outboundFlight,proto3" json:"outbound_flight,omitempty"`                      // The cheapest/shortest one-way SFO-LAX flight.
	ReturnFlight         *Flight      `protobuf:"bytes,2,opt,name=return_flight,json=returnFlight,proto3" json:"return_flight,omitempty"`                            // The cheapest/shortest one-way LAX-SFO flight.
	TotalFare            *money.Money `protobuf:"bytes,3,opt,name=total_fare,json=totalFare,proto3" json:"total_fare,omitempty"`                                     // Total fare for the combined roundtrip.
	TotalDurationMinutes int32        `protobuf:"varint,4,opt,name=total_duration_minutes,json=totalDurationMinutes,proto3" json:"total_duration_minutes,omitempty"` // Total duration for the combined roundtrip.
	CombinedTripId       string       `protobuf:"bytes,5,opt,name=combined_trip_id,json=combinedTripId,proto3" json:"combined_trip_id,omitempty"`                    // unique id for combined trip
}

func (x *CombinedRoundtrip) Reset() {
	*x = CombinedRoundtrip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flight_search_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CombinedRoundtrip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CombinedRoundtrip) ProtoMessage() {}

func (x *CombinedRoundtrip) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flight_search_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CombinedRoundtrip.ProtoReflect.Descriptor instead.
func (*CombinedRoundtrip) Descriptor() ([]byte, []int) {
	return file_v1_flight_search_proto_rawDescGZIP(), []int{7}
}

func (x *CombinedRoundtrip) GetOutboundFlight() *Flight {
	if x != nil {
		return x.OutboundFlight
	}
	return nil
}

func (x *CombinedRoundtrip) GetReturnFlight() *Flight {
	if x != nil {
		return x.ReturnFlight
	}
	return nil
}

func (x *CombinedRoundtrip) GetTotalFare() *money.Money {
	if x != nil {
		return x.TotalFare
	}
	return nil
}

func (x *CombinedRoundtrip) GetTotalDurationMinutes() int32 {
	if x != nil {
		return x.TotalDurationMinutes
	}
	return 0
}

func (x *CombinedRoundtrip) GetCombinedTripId() string {
	if x != nil {
		return x.CombinedTripId
	}
	return ""
}

// Represents the request for a flight search.
type SearchFlightsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *FlightSearchQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *SearchFlightsRequest) Reset() {
	*x = SearchFlightsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flight_search_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchFlightsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFlightsRequest) ProtoMessage() {}

func (x *SearchFlightsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flight_search_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFlightsRequest.ProtoReflect.Descriptor instead.
func (*SearchFlightsRequest) Descriptor() ([]byte, []int) {
	return file_v1_flight_search_proto_rawDescGZIP(), []int{8}
}

func (x *SearchFlightsRequest) GetQuery() *FlightSearchQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

// Represents the response for a flight search.
type SearchFlightsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*FlightSearchResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *SearchFlightsResponse) Reset() {
	*x = SearchFlightsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_flight_search_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchFlightsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFlightsResponse) ProtoMessage() {}

func (x *SearchFlightsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_flight_search_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFlightsResponse.ProtoReflect.Descriptor instead.
func (*SearchFlightsResponse) Descriptor() ([]byte, []int) {
	return file_v1_flight_search_proto_rawDescGZIP(), []int{9}
}

func (x *SearchFlightsResponse) GetResults() []*FlightSearchResult {
	if x != nil {
		return x.Results
	}
	return nil
}

var File_v1_flight_search_proto protoreflect.FileDescriptor

var file_v1_flight_search_proto_rawDesc = []byte{
	0x0a, 0x16, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xad, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xfc, 0x03, 0x0a, 0x0d, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x10, 0x61, 0x72,
	0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x61, 0x72,
	0x72, 0x69, 0x76, 0x61, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a,
	0x0e, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x22,
	0x7a, 0x0a, 0x09, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x65, 0x67, 0x12, 0x37, 0x0a, 0x08,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x46, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x22, 0x87, 0x04, 0x0a, 0x04,
	0x46, 0x61, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x61, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x73,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66,
	0x61, 0x72, 0x65, 0x42, 0x61, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x66, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x46,
	0x61, 0x72, 0x65, 0x2e, 0x46, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x61,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x62, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x62, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x09,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x61, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x46, 0x61, 0x72, 0x65, 0x12, 0x28, 0x0a,
	0x05, 0x74, 0x61, 0x78, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x05, 0x74, 0x61, 0x78, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x66, 0x61, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f,
	0x66, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x46,
	0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x5e, 0x0a, 0x08, 0x46, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x54, 0x10,
	0x03, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x55, 0x4c, 0x4b, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x54,
	0x4f, 0x55, 0x52, 0x10, 0x05, 0x22, 0xdf, 0x01, 0x0a, 0x06, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x65, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x46, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x65, 0x67, 0x52, 0x04, 0x6c, 0x65, 0x67, 0x73, 0x12, 0x28, 0x0a,
	0x05, 0x66, 0x61, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x46, 0x61, 0x72, 0x65,
	0x52, 0x05, 0x66, 0x61, 0x72, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x22, 0xcc, 0x04, 0x0a, 0x11, 0x46, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x45, 0x0a,
	0x09, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x54, 0x72, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x74, 0x72, 0x69, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x61,
	0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x61, 0x62, 0x69,
	0x6e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x61, 0x62, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x73, 0x22, 0x52, 0x0a, 0x08, 0x54, 0x72, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x54, 0x52, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x45,
	0x5f, 0x57, 0x41, 0x59, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x54, 0x52, 0x49, 0x50, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f,
	0x43, 0x49, 0x54, 0x59, 0x10, 0x03, 0x22, 0x86, 0x02, 0x0a, 0x12, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x46, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x07, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x07, 0x66, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72,
	0x69, 0x70, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x74, 0x72, 0x69, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22,
	0xa0, 0x02, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x74, 0x72, 0x69, 0x70, 0x12, 0x3d, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x46, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x31, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61,
	0x72, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x69, 0x70,
	0x49, 0x64, 0x22, 0x4d, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x22, 0x53, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x32, 0x6f, 0x0a, 0x13, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a,
	0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x22,
	0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x64, 0x70, 0x6f, 0x63,
	0x2f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x76, 0x31, 0x3b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_flight_search_proto_rawDescOnce sync.Once
	file_v1_flight_search_proto_rawDescData = file_v1_flight_search_proto_rawDesc
)

func file_v1_flight_search_proto_rawDescGZIP() []byte {
	file_v1_flight_search_proto_rawDescOnce.Do(func() {
		file_v1_flight_search_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_flight_search_proto_rawDescData)
	})
	return file_v1_flight_search_proto_rawDescData
}

var file_v1_flight_search_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_v1_flight_search_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_v1_flight_search_proto_goTypes = []interface{}{
	(Fare_FareType)(0),              // 0: flightsearch.Fare.FareType
	(FlightSearchQuery_TripType)(0), // 1: flightsearch.FlightSearchQuery.TripType
	(*Location)(nil),                // 2: flightsearch.Location
	(*FlightSegment)(nil),           // 3: flightsearch.FlightSegment
	(*FlightLeg)(nil),               // 4: flightsearch.FlightLeg
	(*Fare)(nil),                    // 5: flightsearch.Fare
	(*Flight)(nil),                  // 6: flightsearch.Flight
	(*FlightSearchQuery)(nil),       // 7: flightsearch.FlightSearchQuery
	(*FlightSearchResult)(nil),      // 8: flightsearch.FlightSearchResult
	(*CombinedRoundtrip)(nil),       // 9: flightsearch.CombinedRoundtrip
	(*SearchFlightsRequest)(nil),    // 10: flightsearch.SearchFlightsRequest
	(*SearchFlightsResponse)(nil),   // 11: flightsearch.SearchFlightsResponse
	(*timestamppb.Timestamp)(nil),   // 12: google.protobuf.Timestamp
	(*money.Money)(nil),             // 13: google.type.Money
}
var file_v1_flight_search_proto_depIdxs = []int32{
	2,  // 0: flightsearch.FlightSegment.departure_location:type_name -> flightsearch.Location
	2,  // 1: flightsearch.FlightSegment.arrival_location:type_name -> flightsearch.Location
	12, // 2: flightsearch.FlightSegment.departure_time:type_name -> google.protobuf.Timestamp
	12, // 3: flightsearch.FlightSegment.arrival_time:type_name -> google.protobuf.Timestamp
	3,  // 4: flightsearch.FlightLeg.segments:type_name -> flightsearch.FlightSegment
	0,  // 5: flightsearch.Fare.fare_type:type_name -> flightsearch.Fare.FareType
	13, // 6: flightsearch.Fare.base_fare:type_name -> google.type.Money
	13, // 7: flightsearch.Fare.taxes:type_name -> google.type.Money
	13, // 8: flightsearch.Fare.total_fare:type_name -> google.type.Money
	4,  // 9: flightsearch.Flight.legs:type_name -> flightsearch.FlightLeg
	5,  // 10: flightsearch.Flight.fares:type_name -> flightsearch.Fare
	1,  // 11: flightsearch.FlightSearchQuery.trip_type:type_name -> flightsearch.FlightSearchQuery.TripType
	2,  // 12: flightsearch.FlightSearchQuery.origin_locations:type_name -> flightsearch.Location
	2,  // 13: flightsearch.FlightSearchQuery.destination_locations:type_name -> flightsearch.Location
	12, // 14: flightsearch.FlightSearchQuery.departure_dates:type_name -> google.protobuf.Timestamp
	12, // 15: flightsearch.FlightSearchQuery.return_date:type_name -> google.protobuf.Timestamp
	7,  // 16: flightsearch.FlightSearchResult.query:type_name -> flightsearch.FlightSearchQuery
	6,  // 17: flightsearch.FlightSearchResult.flights:type_name -> flightsearch.Flight
	9,  // 18: flightsearch.FlightSearchResult.combined_roundtrips:type_name -> flightsearch.CombinedRoundtrip
	6,  // 19: flightsearch.CombinedRoundtrip.outbound_flight:type_name -> flightsearch.Flight
	6,  // 20: flightsearch.CombinedRoundtrip.return_flight:type_name -> flightsearch.Flight
	13, // 21: flightsearch.CombinedRoundtrip.total_fare:type_name -> google.type.Money
	7,  // 22: flightsearch.SearchFlightsRequest.query:type_name -> flightsearch.FlightSearchQuery
	8,  // 23: flightsearch.SearchFlightsResponse.results:type_name -> flightsearch.FlightSearchResult
	10, // 24: flightsearch.FlightSearchService.SearchFlights:input_type -> flightsearch.SearchFlightsRequest
	11, // 25: flightsearch.FlightSearchService.SearchFlights:output_type -> flightsearch.SearchFlightsResponse
	25, // [25:26] is the sub-list for method output_type
	24, // [24:25] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_v1_flight_search_proto_init() }
func file_v1_flight_search_proto_init() {
	if File_v1_flight_search_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_flight_search_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flight_search_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flight_search_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightLeg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flight_search_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flight_search_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flight_search_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightSearchQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flight_search_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flight_search_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CombinedRoundtrip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flight_search_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchFlightsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_flight_search_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchFlightsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_flight_search_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_flight_search_proto_goTypes,
		DependencyIndexes: file_v1_flight_search_proto_depIdxs,
		EnumInfos:         file_v1_flight_search_proto_enumTypes,
		MessageInfos:      file_v1_flight_search_proto_msgTypes,
	}.Build()
	File_v1_flight_search_proto = out.File
	file_v1_flight_search_proto_rawDesc = nil
	file_v1_flight_search_proto_goTypes = nil
	file_v1_flight_search_proto_depIdxs = nil
}
